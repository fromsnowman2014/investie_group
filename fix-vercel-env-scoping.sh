#!/bin/bash

# Fix Vercel Environment Variable Scoping Issues
# Step-by-step guide to resolve branch and deployment environment scoping

echo "üîß VERCEL ENVIRONMENT VARIABLE SCOPING FIX"
echo "==========================================="
echo ""

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${RED}üö® PROBLEM IDENTIFIED: Environment Variable Scoping Issue${NC}"
echo "======================================================="
echo "Environment variables are set but not accessible to develop_BE1 branch"
echo "or Preview deployments"
echo ""

echo -e "${BLUE}üìã SOLUTION 1: Fix Vercel Environment Variable Scoping${NC}"
echo "=================================================="
echo ""
echo "Go to Vercel Dashboard and fix the scoping:"
echo "https://vercel.com/dashboard ‚Üí Select Project ‚Üí Settings ‚Üí Environment Variables"
echo ""

echo -e "${YELLOW}Step 1: Check Current Variable Scoping${NC}"
echo "-------------------------------------"
echo "For EACH environment variable, verify:"
echo ""
echo "‚úÖ NEXT_PUBLIC_SUPABASE_URL"
echo "‚úÖ NEXT_PUBLIC_SUPABASE_ANON_KEY" 
echo "‚úÖ NEXT_PUBLIC_SUPABASE_FUNCTIONS_URL"
echo "‚úÖ NEXT_PUBLIC_API_URL"
echo ""
echo "Check that ALL environments are selected:"
echo "- ‚úÖ Production"
echo "- ‚úÖ Preview"  
echo "- ‚úÖ Development"
echo ""
echo "And that NO specific branch restrictions exist"
echo ""

echo -e "${YELLOW}Step 2: Fix Scoping Issues${NC}"
echo "-----------------------------"
echo "If variables are restricted to 'main' branch only:"
echo "1. Click on each environment variable"
echo "2. In the 'Git Branch' field, either:"
echo "   a) Leave EMPTY (applies to all branches) - RECOMMENDED"
echo "   b) Add 'develop_BE1' as allowed branch"
echo "3. Ensure all three environments are checked"
echo "4. Save changes"
echo ""

echo -e "${GREEN}Expected Configuration:${NC}"
echo "======================="
echo "Variable Name: NEXT_PUBLIC_SUPABASE_URL"
echo "Value: https://fwnmnjwtbggasmunsfyk.supabase.co"
echo "Environments: ‚úÖ Production ‚úÖ Preview ‚úÖ Development"
echo "Git Branch: [EMPTY - All branches]"
echo ""
echo "Variable Name: NEXT_PUBLIC_SUPABASE_ANON_KEY"  
echo "Value: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
echo "Environments: ‚úÖ Production ‚úÖ Preview ‚úÖ Development"
echo "Git Branch: [EMPTY - All branches]"
echo ""

echo -e "${BLUE}üìã SOLUTION 2: Create Branch-Specific Variables${NC}"
echo "============================================="
echo ""
echo "If you need branch-specific configurations:"
echo "1. Keep existing variables for 'main' branch"
echo "2. Create duplicate variables for 'develop_BE1' branch:"
echo ""
echo "Click 'Add New' for each variable:"
echo "- Name: NEXT_PUBLIC_SUPABASE_URL"
echo "- Value: https://fwnmnjwtbggasmunsfyk.supabase.co"
echo "- Environments: ‚úÖ Production ‚úÖ Preview ‚úÖ Development"
echo "- Git Branch: develop_BE1"
echo ""

echo -e "${BLUE}üìã SOLUTION 3: Force Production Deployment${NC}"
echo "=========================================="
echo ""
echo "If you want to use Production environment (where variables work):"
echo "1. Merge develop_BE1 to main branch:"
echo ""
echo -e "${GREEN}git checkout main${NC}"
echo -e "${GREEN}git pull origin main${NC}"
echo -e "${GREEN}git merge develop_BE1${NC}"
echo -e "${GREEN}git push origin main${NC}"
echo ""
echo "2. This will trigger a Production deployment with working env vars"
echo ""

echo -e "${YELLOW}üß™ Quick Test After Fix${NC}"
echo "========================"
echo ""
echo "After fixing scoping, test immediately:"
echo "1. Wait 2-3 minutes for new deployment"
echo "2. Visit: https://investie-group-web.vercel.app/env-debug"
echo "3. Check 'Runtime NEXT_PUBLIC_ Count' > 0"
echo "4. Verify all Supabase variables show ‚úÖ SET"
echo ""

echo -e "${RED}‚ö†Ô∏è Important Notes${NC}"
echo "=================="
echo "- Environment variables take effect on NEXT deployment"
echo "- Preview deployments use Preview environment settings"
echo "- Production deployments use Production environment settings"
echo "- Branch restrictions override environment settings"
echo ""

echo -e "${GREEN}‚úÖ Verification Steps${NC}"
echo "===================="
echo "1. Fix variable scoping in Vercel Dashboard"
echo "2. Trigger new deployment (or wait for auto-deploy)"
echo "3. Test /env-debug page"
echo "4. Check main app for working APIs"
echo "5. Confirm hardcoded fallbacks are no longer needed"
echo ""

echo -e "${BLUE}üîÑ Alternative: Programmatic Fix${NC}"
echo "================================"
echo "If manual fix doesn't work, try programmatic approaches..."
